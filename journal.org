*Programmation Objet, Concepts Avancés*

* Cours 1 "Introduction" <2018-10-02>
** Transparents d'introduction du cours
   - Voir file:cours/cours-01.pdf
** Présentation du projet
   - Voir file:projet/version-1.pdf
** TP
- Mise en place de environnement de développement Scala (Installation
  de sbt et d'éventuels IDEs)
- Prendre en main de premiers éléments de syntaxe via :
  https://www.scala-exercises.org/scala_tutorial/
- Formation des groupes de projet
- Jalon 1 : Traduction du sujet du projet en "user stories" écrites en Gherkins.
* Cours 2 "Modélisation objet" <2018-10-09>
** Retour sur le projet
*** Ce que l'on attend de vous
    - Structurer et expliciter le travail de groupe
    - Evaluer son temps de réalisation d'un tâche
    - Rédiger des documents de travail utiles
    - Réfléchir, analyser, concevoir
    - Écrire du Scala, au moins aussi bien que votre Java
*** Rappels sur le fonctionnement de Git et GitHub
   - Pour organiser votre projet, utiliser l'onglet "Project" de GitHub.
   - Les branches doivent être dans le dépôt officiel
   - Ne pas confondre issue et milestone
   - Faire de la relecture de code
   - Suivre le git-flow
*** Interactions avec les chargés de TD
    - Ce sont de "super" chefs de projets
    - Vous devez avoir un rendez-vous une fois par semaine avec eux.
** La modélisation objet par l'exemple
*** Grandes phases des processus de modélisation objet
    - Brainstorming : créatif
    - Analyse : organise
    - Architecture : structure
    - Conception : résoudre
    - Réalisation : construire
    - Validation : vérifie
*** La charge mentale
**** Brainstorming
     Voir photo
**** Formulation du problème général
     - Le problème est d'exécuter les tâches non faites par leurs responsables.
     - Le problème est de finir les tâches ménagères accordées aux
       membres de la famille dans une durée de temps bien définie.
     - Le problème est de rétablir l'équilibre dans l'exécution des tâches.
     - Le problème est d'assumer le travail de direction des tâches ménagères.
     - Le problème est de plannifier l'exécution des tâches.
     - Le problème est de quantifier la charge de travail en fonction des tâches,
       des personnes et de différents paramètres.
     - Le problème est de déterminer les tâches à faire.
     - Le problème général est de prendre en charge les tâches de la vie quotidienne
       d'un foyer de leur explicitation à leur réalisation.
** Choses à faire
*** TODO S'incrire sur https://listes.univ-paris-diderot.fr/sympa/info/poca-m2-2018
*** TODO Premier jalon
*** TODO Lire https://www.quora.com/As-a-programmer-what-is-the-best-advice-youve-ever-been-given
* Cours 3 "Modélisation objet" <2018-10-16>
** Retour sur le projet
** La modélisation objet par l'exemple
   - Retour sur le projet "Charge mentale"

   - "Dans un projet modulaire, on peut tout jeter!" 
      -- Anonymous

   - "Being abstract is something profoundly different from being
     vague … The purpose of abstraction is not to be vague, but to
     create a new semantic level in which one can be absolutely
     precise."
     -- EDW Dijkstra

** Le sous-typage
   [file:cours/cours-03/sous-typer-avec-classe.pdf]
   [file:cours/cours-03/dynamic-typing.jpg]
   - Définition du sous-typage, de la covariance et contravariance
   - Problème des méthodes binaires
** Choses à faire
*** TODO Lire https://blog.bitsrc.io/solid-principles-every-developer-should-know-b3bfa96bb688
*** TODO Lire https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53
*** TODO Ecrire deux user stories pour l'étude de cas "Charge mentale"
*** TODO Etudier https://en.wikipedia.org/wiki/Software_architecture
*** TODO Etudier https://fr.wikipedia.org/wiki/Architecture_logicielle
* Cours 4 "Sous-typage et classe" <2018-10-23>
** Sur le projet et l'usage de Git
   - revenir sur la gestion d'un projet
   - docx n'est pas un format acceptable
   - ne pas utiliser d'autres outils (Overleaf) car il n'y a pas de trace!
   - les messages de commit et les descriptions de PR, c'est important!
   - trop peu de "relectures"
** La modélisation objet par l'exemple
   - Retour sur les cas d'utilisation qui étaient à faire aujourd'hui.
   - Lesquels sont essentiels? Quels sont les relations d'inclusion entre eux?
   - Faire un choix argumenter d'architecture.
   - Quels sont les "concepts" essentiels sur lesquels appuyer une
     conception de ce logiciel?
** Le sous-typage
   - Qu'avez-vous compris du problème des méthodes binaires?
** Les classes
   - La classe comme un concept
* Cours 5 "Classification des use-cases et architecture" <2018-10-30>
** La modélisation objet par l'exemple
   - Classification des uses cases et architectures
   - Explicitation des sous-problèmes du logiciel
** La classe
   - La classe comme une interface
* Cours 6 "Des classes aux traits" <2018-11-13>
** La classe
   - Problème de l'extensibilité fonctionnelle
   - Problème de l'agrégation de fonctionnalités
   - Problème de classe de base fragile
* Cours 7 "Les traits" <2018-11-20>
** Modélisation objet du paquet "Le maître du foyer"
*** Ses responsabilités
    - Interpréter les signaux des capteurs
    - Ajouter la tâche d'un assistant
    - Assigner une tâche à un assistant
    - Marquer  une tâche comme faite
    - Donner l'historique des tâches à un administrateur
    - Ajouter une règle d'expert
    - Connaître toutes les tâches faites ou à faire dans le foyer
    - Connaître les différents assistants
    - Questionner et discuter avec les capteurs
    - Informer les assistants de leur tâche affectée, leur rappeler et interagir avec eux
** Le trait, Saint Graal de la modularité
* Cours 8 "Les traits" <2018-11-27>
** Le trait, Saint Graal de la modularité
** Modélisation objet du paquet "Le maître du foyer"
